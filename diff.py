# Input files are generated by Allegro Design Entry HDL: Tools => Pakager Utilities => Netlist Reports... => Consise Body-Ordered (dialbonl.dat)
# Usage: diff <new_file> <old_file>

import sys
filename1 = sys.argv[-2]
filename2 = sys.argv[-1]

print "Comparing {}(new) to {}(old)...".format(filename1, filename2)

def netread(filename):
    np=0
    with open(filename,'r') as fi:
        netlist={}  # net: [ref.pin, ...]
        sch={}      # sch: {ref:{pin: net, ...}, ...}
        for line in fi:
             if line[:4]=="BODY" or line[:3]=="END":
                 continue
             if line[0]==' ':
                 line = REF+line
                 l = line.split()
             else:
                 l = line.split()
                 REF=l[0]
                 del l[1]
             
             if not(l[2] in netlist):
                 netlist[l[2]]=[]

             if not(l[0] in sch):
                 sch[l[0]]={}
                 
             netlist[l[2]].append("{}.{}".format(l[0],l[1]))
             
             sch[l[0]][l[1]]=l[2]
             np+=1

    for net in netlist.keys():
        netlist[net].sort()

    print "<{}>".format(filename)
    print "  Number of Parts: ", len(sch)
    print "  Number of Pins: ", np
    print "  Number of Nets: ", len(netlist)

    return netlist, sch
    
netlist1, sch1 = netread(filename1)
netlist2, sch2 = netread(filename2)


# Check additional parts
ref_add=[]
ref_match=[]
for ref1 in sch1.keys():
    if not(ref1 in sch2):
        ref_add.append(ref1)
    else:
        ref_match.append(ref1)
ref_add.sort()
print "\n--Additional Parts (Num={})--:".format(len(ref_add))
print ref_add

# Check missing parts
ref_miss=[]
for ref2 in sch2.keys():
    if not(ref2 in sch1):
        ref_miss.append(ref2)
ref_miss.sort()
print "\n--Missing Parts (Num={})--:".format(len(ref_miss))
print ref_miss

# Check pinout
diff=[]
for ref1 in ref_match:
    for pin1 in sch1[ref1].keys():
        if not(pin1 in sch2[ref1]):
            if ref1 in diff:
                continue
            else:
                diff.append(ref1)
# Some parts match pin name but has extra pin
for ref1 in ref_match:
    for pin2 in sch2[ref1].keys():
        if not(pin2 in sch1[ref1]):
            if ref1 in diff:
                continue
            else:
                diff.append(ref1)

diff.sort()

print "\n--Parts with Different Pinout (Num={})--:".format(len(diff))
print diff

# Check wiring

sch_1={}
for net, refpins in netlist1.items():
    for rpin in refpins:
        sch_1[rpin]=sorted(refpins)

sch_2={}
for net, refpins in netlist2.items():
    for rpin in refpins:
        sch_2[rpin]=sorted(refpins)


sch_diff=[]
sch_match=[]
for rpin in sch_1:
    if rpin in sch_2:
        if sch_1[rpin] != sch_2[rpin]:
            sch_diff.append(rpin)
        else:
            sch_match.append(rpin)
            #print sch_1[rf], sch_2[rf]
        
ref={}
for rpin in sch_diff:
    rf = rpin.split('.')[0]
    if not(rf in ref):
        ref[rf]=rpin.split('.')[1]

net_diff=[]
for rf,pin in ref.items():
    net = sch1[rf][pin]
    if not(net in net_diff):
        net_diff.append(net)
net_diff.sort()

print "\n--Net diff (Num={})--:".format(len(net_diff))
print net_diff
